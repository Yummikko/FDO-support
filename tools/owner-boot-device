#!/bin/bash

# Convenience script to simulate the owner booting a VM device

usage() {
    exitCode=${1:-0}
    cat << EndOfMessage
Usage: ${0##*/} [<edge-service-url>]

Arguments:
  <edge-service-url>  (Optional) Wait until this Horizon edge service starts. Normally only used when you are explicitly running this on a device and watching the results.
EndOfMessage
    exit $exitCode
}

if [[ $1 == '-h' || $1 == '--help' ]]; then usage 0; fi

serviceUrl="$1"
#jsonFile=$2  #for testing
workingDir=/var/sdo
sdoNativeDockerImage='sdo:1.10'

#====================== Functions ======================

# Check the exit code passed in and exit if non-zero
chk() {
    local exitCode=$1
    local task=$2
    local dontExit=$3   # set to 'continue' to not exit for this error
    if [[ $exitCode == 0 ]]; then return; fi
    echo "Error: exit code $exitCode from: $task"
    if [[ $dontExit != 'continue' ]]; then
        exit $exitCode
    fi
}

# Check both the exit code and http code passed in and exit if non-zero
chkHttp() {
    local exitCode=$1
    local httpCode=$2
    local task=$3
    local dontExit=$4   # set to 'continue' to not exit for this error
    chk $exitCode $task
    if [[ $httpCode == 200 ]]; then return; fi
    echo "Error: http code $httpCode from: $task"
    if [[ $dontExit != 'continue' ]]; then
        exit $httpCode
    fi
}

# Verify that the prereq commands we need are installed
confirmcmds() {
    for c in $*; do
        #echo "checking $c..."
        if ! which $c >/dev/null; then
            echo "Error: $c is not installed but required, exiting"
            exit 2
        fi
    done
}

ensureWeAreRoot() {
    if [[ $(whoami) != 'root' ]]; then
        echo "Error: must be root to run ${0##*/}. Run 'sudo -i' and then run ${0##*/}"
        exit 2
    fi
}

# Used when watch the agreements for serviceUrl. Returns 1 of: none, negotiating, started
getAgreementState() {
    local json=$(hzn agreement list)
    #local json=$(cat $jsonFile)  # for testing
    local agSvcUrls=$(jq -r '.[].workload_to_run.url' <<< $json)
    #echo "agSvcUrls=${agSvcUrls}."
    #if [[ $agSvcUrls != $serviceUrl ]]; then
    # Need to handle the case where there are multiple agreement. See if at least 1 is for this service
    if ! echo "$agSvcUrls" | grep -qw "$serviceUrl"; then
        echo 'none'
        return
    fi

    # We found at least a partial agreement for this service, so see how far along the agreement is
    #local exStartTime=$(jq -r '.[].agreement_execution_start_time' <<< $json)
    local exStartTime=$(jq -r '.[] | select(.workload_to_run.url=="'$serviceUrl'") | .agreement_execution_start_time' <<< $json)
    #echo "exStartTime=$exStartTime."
    if [[ -z $exStartTime ]]; then
        echo 'negotiating'
    else
        echo 'started'
    fi
}


#====================== Main Code ======================

# Our working directory is /var/sdo
ensureWeAreRoot
mkdir -p $workingDir && cd $workingDir
chk $? "creating and switching to $workingDir"

confirmcmds jq

if [[ -d "$workingDir/sdo-native" && ! -d "$workingDir/sdo-native/bin" ]]; then
    # We are doing TO via the docker container, verifying we have it
    if [[ -z $(docker images -q $sdoNativeDockerImage) ]]; then
        echo "Error: docker image $sdoNativeDockerImage does not exist on this host."
        exit 2
    fi
fi

# If node is registered (if you have run this script before), then unregister it
if which hzn >/dev/null; then
    if [[ $(hzn node list 2>&1 | jq -r '.configstate.state' 2>&1) == 'configured' ]]; then
        hzn unregister -f
    fi
fi

# Get the other files we need from our git repo, by way of our device binaries tar file
deviceBinaryDir='sdo_device_binaries_1.10_linux_x64'
if [[ ! -d $deviceBinaryDir ]]; then
    deviceBinaryTar="$deviceBinaryDir.tar.gz"
    deviceBinaryUrl="https://github.com/open-horizon/SDO-support/releases/download/v1.11/$deviceBinaryTar"
    echo "Removing old device binary tar files, and getting and unpacking $deviceBinaryDir ..."
    rm -rf $workingDir/sdo_device_binaries_*_linux_x64*   # it is important to only have 1 device binary dir, because the device script does a find to locate device.jar
    httpCode=$(curl -w "%{http_code}" --progress-bar -L -O $deviceBinaryUrl)
    chkHttp $? $httpCode "getting $deviceBinaryTar"
    tar -zxvf $deviceBinaryTar
fi

# "Boot" device to have SDO install the agent and register it with the management hub
if [[ -d "$workingDir/sdo-native" ]]; then
    # simulate-mfg.sh created the above dir in the native client case
    echo "Booting with native client..."
    BOOTFS="$workingDir/sdo-native"
    if [[ ! -e $BOOTFS/SerialNo.txt ]]; then
        echo "Error: $BOOTFS/SerialNo.txt does not exist. SDO device initialization must not have completed successfully."
        exit 5
    fi
    echo "Device serial number: $(cat $BOOTFS/SerialNo.txt)"
    savePwd="$PWD"
    cd $BOOTFS

    if [[ -f /var/sdo/sdo-native/run-host-to ]]; then
        #todo: native client directly on the host is still experimental!! (there is still a proxy problem running our agent-install scripts in this environment)
        echo "Running TO on the host..."
        if [[ ! -f /usr/sdo/lib/libiclsclient.so || ! -f /usr/sdo/bin/sdo_all.dalp || ! -e /usr/sdo/bin/sdo_to ]]; then
            echo "Error: the necessary native host executables and libraries for SDO TO have not be installed on this host"
            exit 6
        fi
        if ! systemctl is-active --quiet jhi; then
            systemctl start jhi
            chk $? 'starting jhi service'
        fi
        mkdir -p /opt/Intel/iclsClient/log   # icls seems to need this
        export LD_LIBRARY_PATH=/usr/sdo/lib
        /usr/sdo/bin/sdo_to -df /usr/sdo/bin/sdo_all.dalp
        chk $? 'running sdo_to'
        unset LD_LIBRARY_PATH
        systemctl stop jhi
        chk $? 'stopping jhi service'
        rm -f /var/sdo/sdo-native/run-host-to
    else
        echo "Running TO in the $sdoNativeDockerImage docker container..."
        touch $BOOTFS/inside-sdo-container   # this is how agent-install-wrapper.sh knows it is executing inside the sdo native client container

        # Determine whether device initialization was done using DAL (for Intel devices) or CSDK (other device types), and run the sdo boot process accordingly
        if [[ -e $BOOTFS/CLIENT_INTEL_DI_STATUS && "$(cat $BOOTFS/CLIENT_INTEL_DI_STATUS)" == "**CLIENT_INTEL_DI_SUCCESSFUL**" ]]; then
            echo "Starting TO for CLIENT-INTEL..."
            docker run -i --rm --privileged --name sdo-dal-to -v /dev:/dev -v /sys/:/sys/ -v $BOOTFS:/target/boot $sdoNativeDockerImage sh -c 'jhid -d 2&>1 > /dev/null && export LD_LIBRARY_PATH=/opt/Intel/iclsClient/lib && sdo_to -df /var/lib/intel/dal/applet_repository/sdo_all.dalp && sync '
        elif [[ -e $BOOTFS/CLIENT_SDK_TPM_DI_STATUS && "$(cat $BOOTFS/CLIENT_SDK_TPM_DI_STATUS)" == "**CLIENT_SDK_TPM_DI_SUCCESSFUL**" ]]; then
            echo "Starting TO for Client-SDK TPM..."
            docker run -i --privileged -v $BOOTFS:/target/boot $sdoNativeDockerImage /bin/bash -c 'cd /target/boot && /tpm-sdoout/linux-client'
        elif [[ -e $BOOTFS/CLIENT_SDK_DI_STATUS && "$(cat $BOOTFS/CLIENT_SDK_DI_STATUS)" == "**CLIENT_SDK_DI_SUCCESSFUL**" ]]; then
            echo "Starting TO for Client-SDK..."
            docker run -i --privileged -v $BOOTFS:/target/boot $sdoNativeDockerImage /bin/bash -c 'cd /target/boot && /sdoout/linux-client'
        else
            echo "Error: neither DAL DI or CSDK DI completed successfully on this device at the manufacturer."
            exit 5
        fi

        # We are back from the container, with our files copied into $BOOTFS. Now run the device_exec file that agent-install-wrapper.sh created when it ran inside the sdo container
        rm -f $BOOTFS/inside-sdo-container
        echo "TO1 and TO2 completed and downloaded these files to ${BOOTFS}: $(ls $BOOTFS | tr "\n" " ")"
        echo "$BOOTFS/device_exec: $(cat $BOOTFS/device_exec)"
        echo "Running $BOOTFS/device_exec ..."
        ./device_exec   # this actually runs agent-install-wrapper.sh again (but it will detect that it is not inside the container and behave differently)
        chk $? 'running device_exec'
    fi

    cd $savePwd
    systemctl disable sdo_to.service    # so it does not run on every boot
else
    echo "Booting with java client..."
    cd $deviceBinaryDir/device
    ./device
    chk $? 'booting with java device'
    cd ../..
    systemctl disable sdo_to.service    # so it does not run on every boot
fi

# If they didn't specify a serviceUrl agreement to watch for, then we are done
if [[ -z "$serviceUrl" ]]; then
    exit
fi

# Keep checking agreements and use a poor man's state machine to keep the user informed about the progress of the serviceUrl agreement
#prevState='started'  # for testing
interval=2
while true; do
    case $(getAgreementState) in
        none)
            if [[ -z $prevState ]]; then printf "Waiting for agreement for $serviceUrl "   # very beginning
            elif [[ $prevState == 'none' ]]; then printf '.'
            else printf "\nAgreement cancelled. Waiting again for agreement for $serviceUrl "
            fi
            prevState='none'
            ;;
        negotiating)
            if [[ -z $prevState || $prevState == 'none' ]]; then printf "\nAgreement negotiation for $serviceUrl started. Waiting for completion "
            elif [[ $prevState == 'negotiating' ]]; then printf '.'
            else printf "\nAgreement cancelled. Agreement negotiation for $serviceUrl started. Waiting for completion "
            fi
            prevState='negotiating'
            ;;
        started)
            printf "\nAgreement negotiation completed and $serviceUrl is started.\n"
            break
            ;;
        esac
    sleep $interval
done

# We only get here if the agreement for serviceUrl was finished (service executing)
echo "To see the service log: hzn service log -f $serviceUrl"

